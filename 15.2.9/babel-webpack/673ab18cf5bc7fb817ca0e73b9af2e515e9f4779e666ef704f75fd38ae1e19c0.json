{"ast":null,"code":"import { merge } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-state.service\";\nimport * as i3 from \"./posts.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./footer/footer.component\";\nimport * as i6 from \"./header/header.component\";\nexport class AppComponent {\n  constructor(http, appState, postsService) {\n    this.http = http;\n    this.appState = appState;\n    this.postsService = postsService;\n    this.title = 'recruitment-task';\n    // Fetch posts from both the external API and the local server created\n    const externalPosts$ = this.http.get('https://jsonplaceholder.typicode.com/posts');\n    const localPosts$ = this.postsService.getPosts();\n    // Merge the results from both observables\n    merge(externalPosts$, localPosts$).subscribe(posts => {\n      // Separate the fetched posts from the external API\n      // and the posts from the local server\n      const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n      const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n      this.prints(posts);\n      // Update the app state service with the fetched data\n      this.appState.setExternalPosts(externalPosts); // Create a method in appState service to set external posts\n      this.appState.setLocalPosts(localPosts); // Create a method in appState service to set local posts\n    }, error => {\n      console.error('Failed to fetch posts:', error);\n    });\n  }\n  ngOnInit() {}\n  prints(pts) {\n    console.log(pts);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.AppStateService), i0.ɵɵdirectiveInject(i3.PostsService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 3,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-header\")(1, \"router-outlet\")(2, \"app-footer\");\n    }\n  },\n  dependencies: [i4.RouterOutlet, i5.FooterComponent, i6.HeaderComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAIA,SAASA,KAAK,QAAQ,MAAM;;;;;;;;AAO5B,OAAM,MAAOC,YAAY;EAGvBC,YACUC,IAAgB,EAChBC,QAAyB,EACzBC,YAA0B;IAF1B,SAAI,GAAJF,IAAI;IACJ,aAAQ,GAARC,QAAQ;IACR,iBAAY,GAAZC,YAAY;IALtB,UAAK,GAAG,kBAAkB;IAQpB;IACA,MAAMC,cAAc,GAAG,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,4CAA4C,CAAC;IAClF,MAAMC,WAAW,GAAG,IAAI,CAACH,YAAY,CAACI,QAAQ,EAAE;IAEhD;IACAT,KAAK,CAACM,cAAc,EAAEE,WAAW,CAAC,CAACE,SAAS,CACzCC,KAAY,IAAI;MACf;MACA;MACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC;MACzE,MAAMC,UAAU,GAAGL,KAAK,CAACE,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC;MACtE,IAAI,CAACE,MAAM,CAACN,KAAK,CAAC;MAEnB;MACA,IAAI,CAACP,QAAQ,CAACc,gBAAgB,CAACN,aAAa,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACR,QAAQ,CAACe,aAAa,CAACH,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC,EACAI,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CACF;EACP;EAEAE,QAAQ,IACR;EAEAL,MAAM,CAACM,GAAO;IAEZF,OAAO,CAACG,GAAG,CAACD,GAAG,CAAC;EAClB;;AAtCWtB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAwB;EAAAC;EAAAC;EAAAC;IAAA;MCXzBC,6BAAyB","names":["merge","AppComponent","constructor","http","appState","postsService","externalPosts$","get","localPosts$","getPosts","subscribe","posts","externalPosts","filter","post","hasOwnProperty","localPosts","prints","setExternalPosts","setLocalPosts","error","console","ngOnInit","pts","log","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\app.component.ts","C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AppStateService } from './app-state.service';\nimport { PostsService } from './posts.service';\nimport { merge } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'recruitment-task';\n\n  constructor(\n    private http: HttpClient,\n    private appState: AppStateService,\n    private postsService: PostsService\n  ) {\n\n        // Fetch posts from both the external API and the local server created\n        const externalPosts$ = this.http.get('https://jsonplaceholder.typicode.com/posts');\n        const localPosts$ = this.postsService.getPosts();\n    \n        // Merge the results from both observables\n        merge(externalPosts$, localPosts$).subscribe(\n          (posts: any[]) => {\n            // Separate the fetched posts from the external API\n            // and the posts from the local server\n            const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n            const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n             this.prints(posts);  \n    \n            // Update the app state service with the fetched data\n            this.appState.setExternalPosts(externalPosts); // Create a method in appState service to set external posts\n            this.appState.setLocalPosts(localPosts); // Create a method in appState service to set local posts\n          },\n          (error) => {\n            console.error('Failed to fetch posts:', error);\n          }\n        );\n  }\n\n  ngOnInit(): void {\n  }\n\n  prints(pts:any): void\n  {\n    console.log(pts);\n  };\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>\n<app-footer></app-footer>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}