{"ast":null,"code":"import { BehaviorSubject, mergeMap, Observable, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nconst TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\nexport class AuthService {\n  constructor(http, jwtHelper, router) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.router = router;\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    if (username === 'test' && password === 'test') {\n      return this.generateToken().pipe(mergeMap(token => {\n        localStorage.setItem('currentUser', JSON.stringify({\n          username,\n          token: token.access_token\n        }));\n        this.currentUserSubject.next({\n          username,\n          token: token.access_token\n        });\n        return this.currentUser;\n      }));\n    } else if (username === '' || password === '') {\n      if (username === '') document.querySelector(\"[type='text']\")?.classList.add('border', 'border-danger');\n      if (password === '') document.querySelector(\"[type='password']\")?.classList.add('border', 'border-danger');\n      return new Observable(subscriber => {});\n    }\n    return new Observable(subscriber => {\n      subscriber.error({\n        error: {\n          message: 'Username or password is incorrect'\n        }\n      });\n    });\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/about']);\n  }\n  isAuthenticated() {\n    const token = this.currentUserValue?.token;\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n  generateToken() {\n    return of({\n      access_token: TEST_TOKEN\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,eAAe,EAAOC,QAAQ,EAAEC,UAAU,EAAEC,EAAE,QAAO,MAAM;;;;;AAInE,MAAOC,UAAU,GAAG,6JAA6J;AAGjL,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,SAA2B,EAAUC,MAAc;IAA7E,SAAI,GAAJF,IAAI;IAAsB,cAAS,GAATC,SAAS;IAA4B,WAAM,GAANC,MAAM;IACvF,IAAI,CAACC,kBAAkB,GAAG,IAAIV,eAAe,CAAMW,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC;IAC3G,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,kBAAkB,CAACM,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgB;IACzB,OAAO,IAAI,CAACP,kBAAkB,CAACQ,KAAK;EACtC;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,IAAID,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,MAAM,EAAE;MAC9C,OAAO,IAAI,CAACC,aAAa,EAAE,CAACC,IAAI,CAACtB,QAAQ,CAAEuB,KAAK,IAAI;QAClDX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAEd,IAAI,CAACe,SAAS,CAAC;UAACN,QAAQ;UAAEI,KAAK,EAAEA,KAAK,CAACG;QAAY,CAAC,CAAC,CAAC;QAC1F,IAAI,CAACjB,kBAAkB,CAACkB,IAAI,CAAC;UAACR,QAAQ;UAAEI,KAAK,EAAEA,KAAK,CAACG;QAAY,CAAC,CAAC;QACnE,OAAO,IAAI,CAACZ,WAAW;MACzB,CAAC,CAAC,CAAC;KACJ,MACI,IAAIK,QAAQ,KAAG,EAAE,IAAIC,QAAQ,KAAI,EAAE,EACxC;MACE,IAAGD,QAAQ,KAAG,EAAE,EAChBS,QAAQ,CAACC,aAAa,CAAC,eAAe,CAAC,EAAEC,SAAS,CAACC,GAAG,CAAC,QAAQ,EAAC,eAAe,CAAC;MAChF,IAAGX,QAAQ,KAAG,EAAE,EAChBQ,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC,EAAEC,SAAS,CAACC,GAAG,CAAC,QAAQ,EAAC,eAAe,CAAC;MACpF,OAAO,IAAI9B,UAAU,CAAM+B,UAAU,IAAG,CAAE,CAAC,CAAC;;IAE9C,OAAO,IAAI/B,UAAU,CAAM+B,UAAU,IAAG;MACtCA,UAAU,CAACC,KAAK,CAAC;QAACA,KAAK,EAAE;UAACC,OAAO,EAAE;QAAmC;MAAC,CAAC,CAAC;IAC3E,CAAC,CAAC;EACJ;EAEAC,MAAM;IACJvB,YAAY,CAACwB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAAC3B,kBAAkB,CAACkB,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACnB,MAAM,CAAC6B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,eAAe;IACb,MAAMf,KAAK,GAAG,IAAI,CAACP,gBAAgB,EAAEO,KAAK;IAC1C,OAAO,CAAC,IAAI,CAAChB,SAAS,CAACgC,cAAc,CAAChB,KAAK,CAAC;EAC9C;EAEQF,aAAa;IACnB,OAAOnB,EAAE,CAAE;MAACwB,YAAY,EAAEvB;IAAU,CAAC,CAAC;EAAC;;AA9C9BC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YADE;AAAM","names":["BehaviorSubject","mergeMap","Observable","of","TEST_TOKEN","AuthService","constructor","http","jwtHelper","router","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","currentUserValue","value","login","username","password","generateToken","pipe","token","setItem","stringify","access_token","next","document","querySelector","classList","add","subscriber","error","message","logout","removeItem","navigate","isAuthenticated","isTokenExpired","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {BehaviorSubject, map, mergeMap, Observable, of} from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nconst  TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private router: Router) {\n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string): Observable<any> {\n    if (username === 'test' && password === 'test') {\n      return this.generateToken().pipe(mergeMap((token) => {\n        localStorage.setItem('currentUser', JSON.stringify({username, token: token.access_token}));\n        this.currentUserSubject.next({username, token: token.access_token});\n        return this.currentUser;\n      }))\n    }\n    else if (username==='' || password ==='')\n    {\n      if(username==='')\n      document.querySelector(\"[type='text']\")?.classList.add('border','border-danger');\n      if(password==='')\n      document.querySelector(\"[type='password']\")?.classList.add('border','border-danger');\n      return new Observable<any>(subscriber => {});\n  }\n    return new Observable<any>(subscriber => {\n      subscriber.error({error: {message: 'Username or password is incorrect'}});\n    });\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/about']);\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.currentUserValue?.token;\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n\n  private generateToken(): Observable<{ access_token: string }> {\n    return of ({access_token: TEST_TOKEN});}}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}