{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../posts.service\";\nimport * as i3 from \"../app-state.service\";\nimport * as i4 from \"@angular/forms\";\nexport class PostFormComponent {\n  constructor(router, route, postsService, appState, renderer) {\n    this.router = router;\n    this.route = route;\n    this.postsService = postsService;\n    this.appState = appState;\n    this.renderer = renderer;\n    this.mode = 'Add';\n    this.postId = null;\n    this.formSubmitted = new EventEmitter();\n    this.post = {\n      title: '',\n      body: '',\n      image: ''\n    };\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.mode = 'Edit';\n        this.postId = parseInt(params['id'], 10);\n        this.postsService.getPost(this.postId).subscribe(post => {\n          this.post = post;\n        });\n      } else {\n        this.mode = 'Add';\n      }\n    });\n  }\n  ngAfterContentInit() {\n    document.querySelectorAll(\"input\")[0].onkeydown = document.querySelectorAll(\"textarea\")[0].onkeydown = () => {\n      document.querySelectorAll(\"input\")[0].classList.remove('border', 'border-danger');\n      document.querySelectorAll(\"textarea\")[0].classList.remove('border', 'border-danger');\n    };\n  }\n  onSubmit() {\n    if (this.post.title.length < 2 || this.post.body.length < 5) {\n      if (this.post.title.length < 2) document.querySelector(\"[type='text']\")?.classList.add('border', 'border-danger');\n      if (this.post.body.length < 5) document.querySelector(\"textarea\")?.classList.add('border', 'border-danger');\n      return false;\n    }\n    if (this.mode === 'Add') {\n      this.postsService.createPost(this.post).subscribe(newPost => {\n        this.appState.addPost(newPost);\n        this.router.navigate(['/']);\n      });\n    } else if (this.mode === 'Edit') {\n      this.postsService.updatePost(this.post).subscribe(updatedPost => {\n        this.appState.updatePost(updatedPost);\n        this.router.navigate(['/']).then(() => {\n          setTimeout(() => {\n            const updatedPostElement = document.getElementById(`${updatedPost.id}`);\n            console.log(updatedPost);\n            if (updatedPostElement) {\n              this.renderer.setStyle(updatedPostElement, 'background-color', 'yellow'); // Just to highlight the scroll target\n              updatedPostElement.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n              });\n            }\n          }, 500); // Give some time for the routing to complete\n        });\n      });\n    }\n  }\n\n  onImageSelected(event) {\n    const inputElement = event.target;\n    if (inputElement.files && inputElement.files.length > 0 && inputElement.files[0].size < 8000000) {\n      const file = inputElement.files[0];\n      // Read the file and store its data in post.image\n      const reader = new FileReader();\n      reader.onload = e => {\n        if (e.target) this.post.image = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    } else {\n      alert(\"File Too Large\");\n      inputElement.value = '';\n      // this.post.image = '';\n    }\n  }\n}\n\nPostFormComponent.ɵfac = function PostFormComponent_Factory(t) {\n  return new (t || PostFormComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostsService), i0.ɵɵdirectiveInject(i3.AppStateService), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nPostFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostFormComponent,\n  selectors: [[\"app-post-form\"]],\n  decls: 16,\n  vars: 4,\n  consts: [[1, \"container\", \"mt-4\"], [3, \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"title\", 1, \"form-label\"], [\"type\", \"text\", \"placeholder\", \"2 or more chars\", \"id\", \"title\", \"name\", \"title\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"body\", 1, \"form-label\"], [\"placeholder\", \"5 or more chars\", \"id\", \"body\", \"name\", \"body\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"input-group\"], [\"type\", \"file\", \"id\", \"image\", 1, \"form-control\", 3, \"change\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function PostFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function PostFormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function PostFormComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.post.title = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Body:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"textarea\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PostFormComponent_Template_textarea_ngModelChange_11_listener($event) {\n        return ctx.post.body = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"input\", 8);\n      i0.ɵɵlistener(\"change\", function PostFormComponent_Template_input_change_13_listener($event) {\n        return ctx.onImageSelected($event);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"button\", 9);\n      i0.ɵɵtext(15);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"\", ctx.mode, \" Post\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.post.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.post.body);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", ctx.mode, \" Post\");\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  styles: [\"textarea[_ngcontent-%COMP%] {\\n  resize: vertical;\\n  max-height: 180px;\\n}\\n\\ninput[type=file][_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcG9zdC1mb3JtL3Bvc3QtZm9ybS5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uL3JlY3J1aXRtZW50LXRhc2stbWFpbiUyMC0lMjBTZW5pb3IvcmVjcnVpdG1lbnQtdGFzay1tYWluL3NyYy9hcHAvcG9zdC1mb3JtL3Bvc3QtZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVJLGdCQUFBO0VBQ0EsaUJBQUE7QUNBSjs7QURHQTtFQUVJLGdCQUFBO0FDREoiLCJzb3VyY2VzQ29udGVudCI6WyJ0ZXh0YXJlYVxyXG57XHJcbiAgICByZXNpemU6IHZlcnRpY2FsO1xyXG4gICAgbWF4LWhlaWdodDogMTgwcHg7XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9J2ZpbGUnXVxyXG57XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59IiwidGV4dGFyZWEge1xuICByZXNpemU6IHZlcnRpY2FsO1xuICBtYXgtaGVpZ2h0OiAxODBweDtcbn1cblxuaW5wdXRbdHlwZT1maWxlXSB7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","PostFormComponent","constructor","router","route","postsService","appState","renderer","title","body","image","ngOnInit","params","subscribe","mode","postId","parseInt","getPost","post","ngAfterContentInit","document","querySelectorAll","onkeydown","classList","remove","onSubmit","length","querySelector","add","createPost","newPost","addPost","navigate","updatePost","updatedPost","then","setTimeout","updatedPostElement","getElementById","id","console","log","setStyle","scrollIntoView","behavior","block","onImageSelected","event","inputElement","target","files","size","file","reader","FileReader","onload","e","result","readAsDataURL","alert","value","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\post-form\\post-form.component.ts","C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\post-form\\post-form.component.html"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, Renderer2  } from '@angular/core';\nimport { PostsService } from '../posts.service';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AppStateService} from \"../app-state.service\";\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-post-form',\n  templateUrl: './post-form.component.html',\n  styleUrls: ['./post-form.component.scss']\n})\nexport class PostFormComponent implements OnInit {\n   mode: 'Add' | 'Edit' = 'Add';\n   postId: number | null = null;\n   formSubmitted = new EventEmitter();\n\n  post = {\n    title: '',\n    body: '',\n    image: ''\n  };\n\n  constructor(private router: Router, private route: ActivatedRoute, private postsService: PostsService, private appState: AppStateService, private renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.mode = 'Edit';\n        this.postId = parseInt(params['id'], 10);\n\n        this.postsService.getPost(this.postId).subscribe(post => {\n          this.post = post;\n        });\n      } else {\n        this.mode = 'Add';\n      }\n    });\n  }\n\n  ngAfterContentInit(): void {\n      document.querySelectorAll(\"input\")[0]!.onkeydown = document.querySelectorAll(\"textarea\")[0]!.onkeydown = ()=> \n      {\n        document.querySelectorAll(\"input\")[0].classList.remove('border','border-danger');\n        document.querySelectorAll(\"textarea\")[0].classList.remove('border','border-danger');\n      }\n    };\n\n\n  onSubmit(): (void|boolean) {\n    if(this.post.title.length < 2 || this.post.body.length < 5)\n    {\n      if(this.post.title.length < 2)\n      document.querySelector(\"[type='text']\")?.classList.add('border','border-danger');\n      if(this.post.body.length < 5)\n      document.querySelector(\"textarea\")?.classList.add('border','border-danger');\n      return false;    \n  }\n\n\n    if (this.mode === 'Add') {\n      this.postsService.createPost(this.post).subscribe(newPost => {\n        this.appState.addPost(newPost);\n        this.router.navigate(['/']);\n      });\n    } else if (this.mode === 'Edit') {\n      this.postsService.updatePost(this.post).subscribe(updatedPost => {  \n        this.appState.updatePost(updatedPost);\n        this.router.navigate(['/']).then(() => {\n          setTimeout(() => {\n            const updatedPostElement = document.getElementById(`${updatedPost.id}`);\n            console.log(updatedPost);\n            if (updatedPostElement) {\n              this.renderer.setStyle(updatedPostElement, 'background-color', 'yellow'); // Just to highlight the scroll target\n              updatedPostElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n            }\n          }, 500); // Give some time for the routing to complete\n        });\n      });\n    }\n  }\n\n  onImageSelected(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement.files && inputElement.files.length > 0 && inputElement.files[0].size < 8000000) {\n      const file = inputElement.files[0];\n      // Read the file and store its data in post.image\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        if(e.target)\n        this.post.image = e.target.result as string;\n      };\n      reader.readAsDataURL(file);\n    }\n    else{\n      alert(\"File Too Large\");\n      inputElement.value = '';\n      // this.post.image = '';\n    }\n  }\n}\n","<div class=\"container mt-4\">\n  <h2>{{ mode }} Post</h2> \n  <form (ngSubmit)=\"onSubmit()\">\n    <div class=\"mb-3\">\n      <label for=\"title\" class=\"form-label\">Title:</label>\n      <input type=\"text\" placeholder=\"2 or more chars\" id=\"title\" [(ngModel)]=\"post.title\" name=\"title\" class=\"form-control\">\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"body\" class=\"form-label\">Body:</label>\n      <textarea placeholder=\"5 or more chars\" id=\"body\" [(ngModel)]=\"post.body\" name=\"body\" class=\"form-control\"></textarea>\n      <div class=\"input-group\">\n        <input type=\"file\" class=\"form-control\" id=\"image\" (change)=\"onImageSelected($event)\" >\n      </div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">{{ mode }} Post</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}