{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AppStateService {\n  constructor() {\n    this.initialState = {\n      posts: []\n    };\n    this.stateSubject = new BehaviorSubject(this.initialState);\n    this.state$ = this.stateSubject.asObservable();\n  }\n  setPosts(posts) {\n    this.stateSubject.next({\n      ...this.stateSubject.getValue(),\n      posts\n    });\n  }\n  addPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.posts, post];\n    this.stateSubject.next({\n      ...currentState,\n      posts: updatedPosts\n    });\n  }\n  updatePost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.posts.map(p => p.id !== post.id ? post : p); // Replace '===' with '!=='\n    this.stateSubject.next({\n      ...currentState,\n      posts: updatedPosts\n    });\n  }\n  //Had wrong logic\n  deletePost(postId) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.posts.filter(p => p.id !== postId);\n    this.stateSubject.next({\n      ...currentState,\n      posts: updatedPosts\n    });\n  }\n}\nAppStateService.ɵfac = function AppStateService_Factory(t) {\n  return new (t || AppStateService)();\n};\nAppStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppStateService,\n  factory: AppStateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AASlD,OAAM,MAAOC,eAAe;EAQ1BC;IAPQ,iBAAY,GAAU;MAC5BC,KAAK,EAAE;KACR;IAEO,iBAAY,GAA2B,IAAIH,eAAe,CAAQ,IAAI,CAACI,YAAY,CAAC;IAC5F,WAAM,GAAsB,IAAI,CAACC,YAAY,CAACC,YAAY,EAAE;EAE7C;EAEfC,QAAQ,CAACJ,KAAY;IACnB,IAAI,CAACE,YAAY,CAACG,IAAI,CAAC;MAAE,GAAG,IAAI,CAACH,YAAY,CAACI,QAAQ,EAAE;MAAEN;IAAK,CAAE,CAAC;EACpE;EAEAO,OAAO,CAACC,IAAS;IACf,MAAMC,YAAY,GAAG,IAAI,CAACP,YAAY,CAACI,QAAQ,EAAE;IACjD,MAAMI,YAAY,GAAG,CAAC,GAAGD,YAAY,CAACT,KAAK,EAAEQ,IAAI,CAAC;IAClD,IAAI,CAACN,YAAY,CAACG,IAAI,CAAC;MAAE,GAAGI,YAAY;MAAET,KAAK,EAAEU;IAAY,CAAE,CAAC;EAClE;EAEAC,UAAU,CAACH,IAAS;IAClB,MAAMC,YAAY,GAAG,IAAI,CAACP,YAAY,CAACI,QAAQ,EAAE;IACjD,MAAMI,YAAY,GAAGD,YAAY,CAACT,KAAK,CAACY,GAAG,CAACC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKN,IAAI,CAACM,EAAE,GAAGN,IAAI,GAAGK,CAAE,CAAC,CAAC,CAAC;IACjF,IAAI,CAACX,YAAY,CAACG,IAAI,CAAC;MAAE,GAAGI,YAAY;MAAET,KAAK,EAAEU;IAAY,CAAE,CAAC;EAClE;EACI;EACAK,UAAU,CAACC,MAAc;IACvB,MAAMP,YAAY,GAAG,IAAI,CAACP,YAAY,CAACI,QAAQ,EAAE;IACjD,MAAMI,YAAY,GAAGD,YAAY,CAACT,KAAK,CAACiB,MAAM,CAACJ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKE,MAAM,CAAC;IACpE,IAAI,CAACd,YAAY,CAACG,IAAI,CAAC;MAAE,GAAGI,YAAY;MAAET,KAAK,EAAEU;IAAY,CAAE,CAAC;EAClE;;AA9BOZ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["BehaviorSubject","AppStateService","constructor","posts","initialState","stateSubject","asObservable","setPosts","next","getValue","addPost","post","currentState","updatedPosts","updatePost","map","p","id","deletePost","postId","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\app-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\ninterface State {\n  posts: any[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppStateService {\n  private initialState: State = {\n    posts: []\n  };\n\n  private stateSubject: BehaviorSubject<State> = new BehaviorSubject<State>(this.initialState);\n  state$: Observable<State> = this.stateSubject.asObservable();\n\n  constructor() {}\n\n  setPosts(posts: any[]): void {\n    this.stateSubject.next({ ...this.stateSubject.getValue(), posts });\n  }\n\n  addPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.posts, post];\n    this.stateSubject.next({ ...currentState, posts: updatedPosts });\n  }\n\n  updatePost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.posts.map(p => (p.id !== post.id ? post : p)); // Replace '===' with '!=='\n    this.stateSubject.next({ ...currentState, posts: updatedPosts });\n  }\n      //Had wrong logic\n      deletePost(postId: number): void {\n        const currentState = this.stateSubject.getValue();\n        const updatedPosts = currentState.posts.filter(p => p.id !== postId);\n        this.stateSubject.next({ ...currentState, posts: updatedPosts });\n      }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}