{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAKA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,WAAM,GAAND,MAAM;IAAkB,gBAAW,GAAXC,WAAW;EAAgB;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,IAAI,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;;IAGb,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEJ,KAAK,CAACK;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EACd;;AAVWX,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YADI;AAAM","names":["AuthGuard","constructor","router","authService","canActivate","route","state","isAuthenticated","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private authService: AuthService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}