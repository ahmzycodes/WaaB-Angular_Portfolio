{"ast":null,"code":"import { BehaviorSubject, mergeMap, Observable, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nconst TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\nexport class AuthService {\n  constructor(http, jwtHelper, router) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.router = router;\n    this.wrongPasswordAttempts = 0;\n    this.maxWrongAttempts = 5;\n    this.accountLockKey = 'accountLockTimestamp';\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    if (username === 'test' && password === 'test' && this.wrongPasswordAttempts < this.maxWrongAttempts) {\n      this.wrongPasswordAttempts = 0;\n      return this.generateToken().pipe(mergeMap(token => {\n        localStorage.setItem('currentUser', JSON.stringify({\n          username,\n          token: token.access_token\n        }));\n        this.currentUserSubject.next({\n          username,\n          token: token.access_token\n        });\n        return this.currentUser;\n        console.log(this.wrongPasswordAttempts);\n      }));\n    } else if (username === '' || password === '') {\n      if (username === '') document.querySelector(\"[type='text']\")?.classList.add('border', 'border-danger');\n      if (password === '') document.querySelector(\"[type='password']\")?.classList.add('border', 'border-danger');\n      return new Observable(subscriber => {\n        subscriber.error({\n          error: {\n            message: 'Both fields are required'\n          }\n        });\n      });\n    }\n    const lockTimestamp = localStorage.getItem(this.accountLockKey);\n    if (lockTimestamp && Date.now() < parseInt(lockTimestamp, 10)) {\n      // Account is locked; prevent login\n      const lockDurationInMinutes = 10;\n      return new Observable(subscriber => {\n        subscriber.error({\n          error: {\n            message: `Account is locked. Please try again after ${lockDurationInMinutes} minutes.`\n          }\n        });\n      });\n    }\n    this.wrongPasswordAttempts++;\n    if (this.wrongPasswordAttempts >= this.maxWrongAttempts) {\n      // Lock the account and prevent further login attempts for a defined time\n      const lockDurationInMinutes = 5; // Define the lock duration in minss\n      const lockTimestamp = Date.now() + lockDurationInMinutes * 60 * 1000;\n      localStorage.setItem(this.accountLockKey, lockTimestamp.toString());\n    }\n    return new Observable(subscriber => {\n      subscriber.error({\n        error: {\n          message: 'Username or Password is incorrect'\n        }\n      });\n    });\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  isAuthenticated() {\n    const token = this.currentUserValue?.token;\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n  generateToken() {\n    return of({\n      access_token: TEST_TOKEN\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","mergeMap","Observable","of","TEST_TOKEN","AuthService","constructor","http","jwtHelper","router","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","currentUserValue","value","login","username","password","wrongPasswordAttempts","maxWrongAttempts","generateToken","pipe","token","setItem","stringify","access_token","next","console","log","document","querySelector","classList","add","subscriber","error","message","lockTimestamp","accountLockKey","Date","now","parseInt","lockDurationInMinutes","toString","logout","removeItem","navigate","isAuthenticated","isTokenExpired","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {BehaviorSubject, map, mergeMap, Observable, of} from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nconst  TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n  private wrongPasswordAttempts = 0;\n  private maxWrongAttempts = 5;\n  private accountLockKey = 'accountLockTimestamp';\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private router: Router) {\n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string): Observable<any> {\n    if (username === 'test' && password === 'test' && this.wrongPasswordAttempts<this.maxWrongAttempts) {\n      this.wrongPasswordAttempts = 0; \n      return this.generateToken().pipe(mergeMap((token) => {\n        localStorage.setItem('currentUser', JSON.stringify({username, token: token.access_token}));\n        this.currentUserSubject.next({username, token: token.access_token});\n        return this.currentUser;\n        console.log(this.wrongPasswordAttempts);\n      }))\n    }\n    else if (username==='' || password ==='')\n    {\n      if(username==='')\n      document.querySelector(\"[type='text']\")?.classList.add('border','border-danger');\n      if(password==='')\n      document.querySelector(\"[type='password']\")?.classList.add('border','border-danger');\n      return new Observable<any>(subscriber => {subscriber.error({error: {message: 'Both fields are required'}})});\n  } \n  const lockTimestamp = localStorage.getItem(this.accountLockKey);\n  if (lockTimestamp && Date.now() < parseInt(lockTimestamp, 10)) {\n    // Account is locked; prevent login\n    const lockDurationInMinutes = 10;\n    return new Observable<any>(subscriber => {\n      subscriber.error({\n        error: { message: `Account is locked. Please try again after ${lockDurationInMinutes} minutes.` }\n      });\n    });\n  }\n     this.wrongPasswordAttempts++;\n     if (this.wrongPasswordAttempts >= this.maxWrongAttempts) {\n      // Lock the account and prevent further login attempts for a defined time\n      const lockDurationInMinutes = 5; // Define the lock duration in minss\n      const lockTimestamp = Date.now() + lockDurationInMinutes * 60 * 1000;\n      localStorage.setItem(this.accountLockKey, lockTimestamp.toString());\n    }\n    return new Observable<any>(subscriber => {\n      subscriber.error({error: {message: 'Username or Password is incorrect'}});\n    });\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.currentUserValue?.token;\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n\n  private generateToken(): Observable<{ access_token: string }> {\n    return of ({access_token: TEST_TOKEN});}}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}