{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AppStateService {\n  constructor() {\n    this.initialState = {\n      externalPosts: [],\n      localPosts: []\n    };\n    this.stateSubject = new BehaviorSubject(this.initialState);\n    this.state$ = this.stateSubject.asObservable();\n  }\n  // setPosts(posts: any[]): void {\n  //   const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n  //   const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n  //   this.stateSubject.next({ externalPosts, localPosts });\n  // }\n  setExternalPosts(externalPosts) {\n    this.stateSubject.next({\n      ...this.stateSubject.getValue(),\n      externalPosts\n    });\n  }\n  setLocalPosts(localPosts) {\n    this.stateSubject.next({\n      ...this.stateSubject.getValue(),\n      localPosts\n    });\n  }\n  addExternalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.externalPosts, post];\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  addLocalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.localPosts, post];\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n  updateExternalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.map(p => p.id !== post.id ? post : p);\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  updateLocalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.map(p => p.id !== post.id ? post : p);\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n  deleteExternalPost(postId) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  deleteLocalPost(postId) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n}\nAppStateService.ɵfac = function AppStateService_Factory(t) {\n  return new (t || AppStateService)();\n};\nAppStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppStateService,\n  factory: AppStateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","AppStateService","constructor","externalPosts","localPosts","initialState","stateSubject","asObservable","setExternalPosts","next","getValue","setLocalPosts","addExternalPost","post","currentState","updatedPosts","addLocalPost","updateExternalPost","map","p","id","updateLocalPost","deleteExternalPost","postId","filter","deleteLocalPost","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\app-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\ninterface State {\n  externalPosts: any[];\n  localPosts: any[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppStateService {\n  private initialState: State = {\n    externalPosts: [],\n    localPosts: []\n    \n  };\n\n  private stateSubject: BehaviorSubject<State> = new BehaviorSubject<State>(this.initialState);\n  state$: Observable<State> = this.stateSubject.asObservable();\n\n  constructor() {}\n\n  // setPosts(posts: any[]): void {\n  //   const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n  //   const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n\n  //   this.stateSubject.next({ externalPosts, localPosts });\n  // }\n\n  setExternalPosts(externalPosts: any[]): void {\n    this.stateSubject.next({ ...this.stateSubject.getValue(), externalPosts });\n  }\n\n  setLocalPosts(localPosts: any[]): void {\n    this.stateSubject.next({ ...this.stateSubject.getValue(), localPosts });\n  }\n\n  addExternalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.externalPosts, post];\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  addLocalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.localPosts, post];\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n\n  updateExternalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.map(p => (p.id !== post.id ? post : p));\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  updateLocalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.map(p => (p.id !== post.id ? post : p));\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n\n  deleteExternalPost(postId: number): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  deleteLocalPost(postId: number): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}