{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AppStateService {\n  constructor() {\n    this.initialState = {\n      externalPosts: [],\n      localPosts: []\n    };\n    this.stateSubject = new BehaviorSubject(this.initialState);\n    this.state$ = this.stateSubject.asObservable();\n  }\n  setPosts(posts) {\n    const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n    const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n    console.log(localPosts);\n    this.stateSubject.next({\n      externalPosts,\n      localPosts\n    });\n  }\n  setExternalPosts(externalPosts) {\n    this.stateSubject.next({\n      ...this.stateSubject.getValue(),\n      externalPosts\n    });\n  }\n  setLocalPosts(localPosts) {\n    this.stateSubject.next({\n      ...this.stateSubject.getValue(),\n      localPosts\n    });\n  }\n  addExternalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.externalPosts, post];\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  addLocalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.localPosts, post];\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n  updateExternalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.map(p => p.id !== post.id ? post : p);\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  updateLocalPost(post) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.map(p => p.id !== post.id ? post : p);\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n  deleteExternalPost(postId) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({\n      ...currentState,\n      externalPosts: updatedPosts\n    });\n  }\n  deleteLocalPost(postId) {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({\n      ...currentState,\n      localPosts: updatedPosts\n    });\n  }\n}\nAppStateService.ɵfac = function AppStateService_Factory(t) {\n  return new (t || AppStateService)();\n};\nAppStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppStateService,\n  factory: AppStateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","AppStateService","constructor","externalPosts","localPosts","initialState","stateSubject","asObservable","setPosts","posts","filter","post","hasOwnProperty","console","log","next","setExternalPosts","getValue","setLocalPosts","addExternalPost","currentState","updatedPosts","addLocalPost","updateExternalPost","map","p","id","updateLocalPost","deleteExternalPost","postId","deleteLocalPost","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ahmzy_5ce8ywd\\OneDrive\\Documents\\volvo\\Angular-main\\Angular-main\\recruitment-task-main - Senior\\recruitment-task-main\\src\\app\\app-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\ninterface State {\n  externalPosts: any[];\n  localPosts: any[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppStateService {\n  private initialState: State = {\n    externalPosts: [],\n    localPosts: []\n    \n  };\n\n  private stateSubject: BehaviorSubject<State> = new BehaviorSubject<State>(this.initialState);\n  state$: Observable<State> = this.stateSubject.asObservable();\n\n  constructor() {}\n\n  setPosts(posts: any[]): void {\n    const externalPosts = posts.filter(post => post.hasOwnProperty('userId'));\n    const localPosts = posts.filter(post => !post.hasOwnProperty('userId'));\n    console.log(localPosts);\n\n    this.stateSubject.next({ externalPosts, localPosts });\n  }\n\n  setExternalPosts(externalPosts: any[]): void {\n    this.stateSubject.next({ ...this.stateSubject.getValue(), externalPosts });\n  }\n\n  setLocalPosts(localPosts: any[]): void {\n    this.stateSubject.next({ ...this.stateSubject.getValue(), localPosts });\n  }\n\n  addExternalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.externalPosts, post];\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  addLocalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = [...currentState.localPosts, post];\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n\n  updateExternalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.map(p => (p.id !== post.id ? post : p));\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  updateLocalPost(post: any): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.map(p => (p.id !== post.id ? post : p));\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n\n  deleteExternalPost(postId: number): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.externalPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({ ...currentState, externalPosts: updatedPosts });\n  }\n\n  deleteLocalPost(postId: number): void {\n    const currentState = this.stateSubject.getValue();\n    const updatedPosts = currentState.localPosts.filter(p => p.id !== postId);\n    this.stateSubject.next({ ...currentState, localPosts: updatedPosts });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}